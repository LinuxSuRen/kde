apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    linuxsuren.github.io/application_kind: devspace
    linuxsuren.github.io/application: {{.ObjectMeta.Name}}
  name: {{.ObjectMeta.Name}}
  namespace: {{.ObjectMeta.Namespace}}
  ownerReferences:
    - apiVersion: linuxsuren.github.io/v1alpha1
      blockOwnerDeletion: true
      controller: true
      kind: DevSpace
      name: {{.ObjectMeta.Name}}
      uid: {{.ObjectMeta.UID}}
spec:
  {{ if or (eq .Status.Phase "Off") (not .Spec.Replicas) }}
  replicas: 0
  {{else}}
  replicas: {{.Spec.Replicas}}
  {{ end }}
  selector:
    matchLabels:
      linuxsuren.github.io/application_kind: devspace
      linuxsuren.github.io/application: {{.ObjectMeta.Name}}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        linuxsuren.github.io/application_kind: devspace
        linuxsuren.github.io/application: {{.ObjectMeta.Name}}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  linuxsuren.github.io/application_kind: devspace
                  linuxsuren.github.io/application: {{.ObjectMeta.Name}}
              topologyKey: kubernetes.io/hostname
            weight: 5
      {{ if .Spec.HostAliases }}
      hostAliases:
      {{ range $item := .Spec.HostAliases }}
      - ip: {{ $item.IP }}
        hostnames:
        {{ range $host := $item.Hostnames }}
        - {{ $host }}
        {{ end }}
      {{ end }}
      {{ end }}
      initContainers:
        - image: {{.Spec.Image}}
          imagePullPolicy: {{index .ObjectMeta.Annotations "linuxsuren.github.io/image-pull-policy"}}
          name: init
          command:
            - /bin/bash
            - -c
            - |
              set -e
              set -x
              cd /home/workspace
              cp /usr/local/* /usr/local-bak -r -n
              chmod 1777 /tmp
              [[ -d "/var/data/.cache" ]] && [[ ! -d "/home/workspace/.cache" ]] && cp /var/data/.cache /home/workspace -a -r -n
              [[ -d "/var/data/.local" ]] && [[ ! -d "/home/workspace/.local" ]] && cp /var/data/.local /home/workspace -a -r -n
              [[ -d "/var/data/.oh-my-zsh" ]] && [[ ! -d "/home/workspace/.oh-my-zsh" ]] && cp /var/data/.oh-my-zsh /home/workspace -a -r -n
              [[ -d "/var/data/.openvscode-server" ]] && [[ ! -e "/home/workspace/.openvscode-server/lock" ]] && cp /var/data/.openvscode-server /home/workspace -a -r -n && touch /home/workspace/.openvscode-server/lock
              [[ -d "/var/data/.sdkman" ]] && [[ ! -d "/home/workspace/.sdkman" ]] && cp /var/data/.sdkman /home/workspace/ -a -r -n
              [[ -d "/var/data/.moon" ]] && [[ ! -d "/home/workspace/.moon" ]] && cp /var/data/.moon /home/workspace/ -a -r -n
              [[ -d "/var/data/.cargo" ]] && [[ ! -d "/home/workspace/.cargo" ]] && cp /var/data/.cargo /home/workspace/ -a -r -n
              [[ -d "/var/data/.rustup" ]] && [[ ! -d "/home/workspace/.rustup" ]] && cp /var/data/.rustup /home/workspace/ -a -r -n
              [[ -d "/var/data/go" ]] && [[ ! -d "/home/workspace/go" ]] && cp /var/data/go /home/workspace/ -a -r -n
              [[ -e "/var/data/.bashrc" ]] && [[ ! -e "/home/workspace/.bashrc" ]] && cp /var/data/.bashrc /home/workspace
              [[ -e "/var/data/.zshrc" ]] && [[ ! -e "/home/workspace/.zshrc" ]] && cp /var/data/.zshrc /home/workspace
              [[ -e "/var/data/.profile" ]] && [[ ! -e "/home/workspace/.profile" ]] && cp /var/data/.profile /home/workspace
              [[ -e "/var/data/openvscode-server-back/data/Machine/settings.json" ]] && [[ ! -e "/home/workspace/.openvscode-server/data/Machine/settings.json" ]] && \
                  mkdir -p /home/workspace/.openvscode-server/data/Machine && \
                  cp /var/data/openvscode-server-back/data/Machine/settings.json /home/workspace/.openvscode-server/data/Machine/settings.json
              {{ if .Spec.Repository }}
              {{ if .Spec.Repository.Username }}
              git config --global user.name {{.Spec.Repository.Username}}
              {{ end }}
              {{ if .Spec.Repository.Email }}
              git config --global user.email {{.Spec.Repository.Email}}
              {{ end }}
              {{ if .Spec.Repository.URL }}
              git clone {{.Spec.Repository.URL}} --depth 1 --single-branch | exit 0
              {{ else }}
              echo "no repository given"
              {{ end }}
              {{ end }}
              {{ if .Spec.InitScript }}
              {{ .Spec.InitScript }}
              {{ else }}
              echo "no custom script given"
              {{ end }}
              touch /var/lib/dpkg/status
          volumeMounts:
            - mountPath: /home/workspace
              name: cache
              subPath: workspace
            - mountPath: /usr/local-bak
              name: cache
              subPath: usr-local
            - mountPath: /tmp
              name: cache
              subPath: tmp
            - mountPath: /var/data/openvscode-server-back/data/Machine
              name: config
            - mountPath: /var/lib/dpkg
              name: cache
              subPath: dpkg
          securityContext:
            allowPrivilegeEscalation: true
            runAsUser: 0
            privileged: true
      containers:
        - image: {{.Spec.Image}}
          imagePullPolicy: {{index .ObjectMeta.Annotations "linuxsuren.github.io/image-pull-policy"}}
          name: server
          env:
            - name: DEVSPACE_VERSION
              value: "1"
          {{ range $key, $value := .Spec.Environment }}
            - name: {{ $key }}
              value: "{{ $value }}"
          {{ end }}
          resources:
            requests:
              cpu: {{.Spec.CPU}}
              memory: {{.Spec.Memory}}
            limits:
              cpu: {{.Spec.CPU}}
              memory: {{.Spec.Memory}}
          ports:
            - containerPort: 3000
              name: http
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: true
            runAsUser: 0
            privileged: true
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /home/workspace
              name: cache
              subPath: workspace
            - mountPath: /root
              name: cache
              subPath: rootHome
            - mountPath: /usr/local
              name: cache
              subPath: usr-local
            - mountPath: /tmp
              name: cache
              subPath: tmp
            - mountPath: /var/lib/apt
              name: cache
              subPath: apt
            - mountPath: /var/lib/dpkg
              name: cache
              subPath: dpkg
            - mountPath: /var/log
              name: cache
              subPath: log
            - mountPath: /usr/share/doc
              name: cache
              subPath: doc
            - mountPath: /var/cache
              name: cache
              subPath: cache
            {{if and .Spec.Services.Docker .Spec.Services.Docker.Enabled}}
            - mountPath: /var/lib/docker
              name: cache
              subPath: docker
            - mountPath: /var/run
              name: container-runtime
            {{end}}
            {{if .Spec.Auth.SSHPrivateKey}}
            - mountPath: /root/.ssh
              name: config
            {{end}}
        {{if and .Spec.Services.Docker .Spec.Services.Docker.Enabled}}
        - image: ghcr.io/linuxsuren/library/docker:27.0.3-dind
          imagePullPolicy: {{index .ObjectMeta.Annotations "linuxsuren.github.io/image-pull-policy"}}
          name: docker
          resources:
            requests:
              cpu: 50m
              memory: 50Mi
            limits:
              cpu: {{.Spec.CPU}}
              memory: {{.Spec.Memory}}
          securityContext:
            allowPrivilegeEscalation: true
            runAsUser: 0
            privileged: true
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /var/lib/docker
              name: cache
              subPath: docker
            - mountPath: /var/run
              name: container-runtime
              readOnly: false
            - mountPath: /etc/docker
              name: config
            - mountPath: /certs
              name: cache
              subPath: certs
        {{end}}
        {{if and .Spec.Services.Redis .Spec.Services.Redis.Enabled}}
        - image: ghcr.io/linuxsuren/library/redis:7.0.14
          imagePullPolicy: {{index .ObjectMeta.Annotations "linuxsuren.github.io/image-pull-policy"}}
          name: redis
          securityContext:
            readOnlyRootFilesystem: true
        {{end}}
        {{if and .Spec.Services.MySQL .Spec.Services.MySQL.Enabled}}
        - image: ghcr.io/linuxsuren/library/mysql:8.2.0
          imagePullPolicy: {{index .ObjectMeta.Annotations "linuxsuren.github.io/image-pull-policy"}}
          name: mysql
          securityContext:
            readOnlyRootFilesystem: true
          env:
          - name: MYSQL_ROOT_PASSWORD
            value: {{or .Spec.Services.MySQL.Password "root"}}
          - name: MYSQL_DATABASE
            value: {{or .Spec.Services.MySQL.Database "default"}}
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: cache
              subPath: mysql
            - mountPath: /tmp
              name: cache
              subPath: tmp
            - mountPath: /var/run/mysqld
              name: cache
              subPath: mysqld
        {{end}}
        {{if and .Spec.Services.Postgres .Spec.Services.Postgres.Enabled}}
        - image: ghcr.io/linuxsuren/library/postgres:16.0
          imagePullPolicy: {{index .ObjectMeta.Annotations "linuxsuren.github.io/image-pull-policy"}}
          name: postgres
          securityContext:
            readOnlyRootFilesystem: true
          env:
          - name: POSTGRES_PASSWORD
            value: {{or .Spec.Services.Postgres.Password "root"}}
          - name: POSTGRES_DB
            value: {{or .Spec.Services.Postgres.Database "default"}}
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: cache
              subPath: postgres
        {{end}}
        {{if and .Spec.Services.TDEngine .Spec.Services.TDEngine.Enabled}}
        - image: ghcr.io/linuxsuren/tdengine/tdengine:3.3.2.0
          imagePullPolicy: {{index .ObjectMeta.Annotations "linuxsuren.github.io/image-pull-policy"}}
          name: taos
          securityContext:
            readOnlyRootFilesystem: true
          volumeMounts:
            - mountPath: /var/lib/taos
              name: cache
              subPath: taos
        {{end}}
        {{if and .Spec.Services.RabbitMQ .Spec.Services.RabbitMQ.Enabled}}
        - image: ghcr.io/linuxsuren/library/rabbitmq:3.13.6
          imagePullPolicy: {{index .ObjectMeta.Annotations "linuxsuren.github.io/image-pull-policy"}}
          name: rabbitmq
          securityContext:
            readOnlyRootFilesystem: true
          env:
          - name: RABBITMQ_DEFAULT_USER
            value: {{or .Spec.Services.RabbitMQ.Username "guest"}}
          - name: RABBITMQ_DEFAULT_PASS
            value: {{or .Spec.Services.RabbitMQ.Password "guest"}}
          volumeMounts:
            - mountPath: /var/lib/rabbitmq
              name: cache
              subPath: rabbitmq
        {{end}}
      securityContext:
        runAsNonRoot: false
      volumes:
        - name: cache
          {{if not .ObjectMeta.Annotations.storageTemporary}}
          persistentVolumeClaim:
            claimName: {{.ObjectMeta.Name}}
          {{end}}
          {{if .ObjectMeta.Annotations.storageTemporary}}
          emptyDir: {}
          {{end}}
        - name: container-runtime
          emptyDir: {}
        - name: config
          configMap:
            defaultMode: 0600
            name: {{.ObjectMeta.Name}}
